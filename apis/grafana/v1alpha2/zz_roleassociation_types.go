/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoleAssociationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RoleAssociationParameters struct {

	// The AWS SSO group ids to be assigned the role given in role.
	// +kubebuilder:validation:Optional
	GroupIds []*string `json:"groupIds,omitempty" tf:"group_ids,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// The grafana role. Valid values can be found here.
	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`

	// The AWS SSO user ids to be assigned the role given in role.
	// +kubebuilder:validation:Optional
	UserIds []*string `json:"userIds,omitempty" tf:"user_ids,omitempty"`

	// The workspace id.
	// +crossplane:generate:reference:type=Workspace
	// +kubebuilder:validation:Optional
	WorkspaceID *string `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`

	// Reference to a Workspace to populate workspaceId.
	// +kubebuilder:validation:Optional
	WorkspaceIDRef *v1.Reference `json:"workspaceIdRef,omitempty" tf:"-"`

	// Selector for a Workspace to populate workspaceId.
	// +kubebuilder:validation:Optional
	WorkspaceIDSelector *v1.Selector `json:"workspaceIdSelector,omitempty" tf:"-"`
}

// RoleAssociationSpec defines the desired state of RoleAssociation
type RoleAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoleAssociationParameters `json:"forProvider"`
}

// RoleAssociationStatus defines the observed state of RoleAssociation.
type RoleAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoleAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RoleAssociation is the Schema for the RoleAssociations API. Provides an Amazon Managed Grafana workspace role association resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type RoleAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RoleAssociationSpec   `json:"spec"`
	Status            RoleAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoleAssociationList contains a list of RoleAssociations
type RoleAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RoleAssociation `json:"items"`
}

// Repository type metadata.
var (
	RoleAssociation_Kind             = "RoleAssociation"
	RoleAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RoleAssociation_Kind}.String()
	RoleAssociation_KindAPIVersion   = RoleAssociation_Kind + "." + CRDGroupVersion.String()
	RoleAssociation_GroupVersionKind = CRDGroupVersion.WithKind(RoleAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&RoleAssociation{}, &RoleAssociationList{})
}
