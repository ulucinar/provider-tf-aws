/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WorkspaceSAMLConfigurationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type WorkspaceSAMLConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	AdminRoleValues []*string `json:"adminRoleValues,omitempty" tf:"admin_role_values,omitempty"`

	// +kubebuilder:validation:Optional
	AllowedOrganizations []*string `json:"allowedOrganizations,omitempty" tf:"allowed_organizations,omitempty"`

	// +kubebuilder:validation:Required
	EditorRoleValues []*string `json:"editorRoleValues" tf:"editor_role_values,omitempty"`

	// +kubebuilder:validation:Optional
	EmailAssertion *string `json:"emailAssertion,omitempty" tf:"email_assertion,omitempty"`

	// +kubebuilder:validation:Optional
	GroupsAssertion *string `json:"groupsAssertion,omitempty" tf:"groups_assertion,omitempty"`

	// +kubebuilder:validation:Optional
	IdpMetadataURL *string `json:"idpMetadataUrl,omitempty" tf:"idp_metadata_url,omitempty"`

	// +kubebuilder:validation:Optional
	IdpMetadataXML *string `json:"idpMetadataXml,omitempty" tf:"idp_metadata_xml,omitempty"`

	// +kubebuilder:validation:Optional
	LoginAssertion *string `json:"loginAssertion,omitempty" tf:"login_assertion,omitempty"`

	// +kubebuilder:validation:Optional
	LoginValidityDuration *float64 `json:"loginValidityDuration,omitempty" tf:"login_validity_duration,omitempty"`

	// +kubebuilder:validation:Optional
	NameAssertion *string `json:"nameAssertion,omitempty" tf:"name_assertion,omitempty"`

	// +kubebuilder:validation:Optional
	OrgAssertion *string `json:"orgAssertion,omitempty" tf:"org_assertion,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	RoleAssertion *string `json:"roleAssertion,omitempty" tf:"role_assertion,omitempty"`

	// +crossplane:generate:reference:type=Workspace
	// +kubebuilder:validation:Optional
	WorkspaceID *string `json:"workspaceId,omitempty" tf:"workspace_id,omitempty"`

	// Reference to a Workspace to populate workspaceId.
	// +kubebuilder:validation:Optional
	WorkspaceIDRef *v1.Reference `json:"workspaceIdRef,omitempty" tf:"-"`

	// Selector for a Workspace to populate workspaceId.
	// +kubebuilder:validation:Optional
	WorkspaceIDSelector *v1.Selector `json:"workspaceIdSelector,omitempty" tf:"-"`
}

// WorkspaceSAMLConfigurationSpec defines the desired state of WorkspaceSAMLConfiguration
type WorkspaceSAMLConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WorkspaceSAMLConfigurationParameters `json:"forProvider"`
}

// WorkspaceSAMLConfigurationStatus defines the observed state of WorkspaceSAMLConfiguration.
type WorkspaceSAMLConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WorkspaceSAMLConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WorkspaceSAMLConfiguration is the Schema for the WorkspaceSAMLConfigurations API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type WorkspaceSAMLConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WorkspaceSAMLConfigurationSpec   `json:"spec"`
	Status            WorkspaceSAMLConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkspaceSAMLConfigurationList contains a list of WorkspaceSAMLConfigurations
type WorkspaceSAMLConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WorkspaceSAMLConfiguration `json:"items"`
}

// Repository type metadata.
var (
	WorkspaceSAMLConfiguration_Kind             = "WorkspaceSAMLConfiguration"
	WorkspaceSAMLConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WorkspaceSAMLConfiguration_Kind}.String()
	WorkspaceSAMLConfiguration_KindAPIVersion   = WorkspaceSAMLConfiguration_Kind + "." + CRDGroupVersion.String()
	WorkspaceSAMLConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(WorkspaceSAMLConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&WorkspaceSAMLConfiguration{}, &WorkspaceSAMLConfigurationList{})
}
