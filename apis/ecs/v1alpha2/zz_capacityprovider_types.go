/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AutoScalingGroupProviderObservation struct {
}

type AutoScalingGroupProviderParameters struct {

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-aws/apis/autoscaling/v1alpha2.AutoscalingGroup
	// +crossplane:generate:reference:extractor=github.com/crossplane-contrib/provider-jet-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	AutoScalingGroupArn *string `json:"autoScalingGroupArn,omitempty" tf:"auto_scaling_group_arn,omitempty"`

	// Reference to a AutoscalingGroup in autoscaling to populate autoScalingGroupArn.
	// +kubebuilder:validation:Optional
	AutoScalingGroupArnRef *v1.Reference `json:"autoScalingGroupArnRef,omitempty" tf:"-"`

	// Selector for a AutoscalingGroup in autoscaling to populate autoScalingGroupArn.
	// +kubebuilder:validation:Optional
	AutoScalingGroupArnSelector *v1.Selector `json:"autoScalingGroupArnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ManagedScaling []ManagedScalingParameters `json:"managedScaling,omitempty" tf:"managed_scaling,omitempty"`

	// +kubebuilder:validation:Optional
	ManagedTerminationProtection *string `json:"managedTerminationProtection,omitempty" tf:"managed_termination_protection,omitempty"`
}

type CapacityProviderObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type CapacityProviderParameters struct {

	// +kubebuilder:validation:Required
	AutoScalingGroupProvider []AutoScalingGroupProviderParameters `json:"autoScalingGroupProvider" tf:"auto_scaling_group_provider,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ManagedScalingObservation struct {
}

type ManagedScalingParameters struct {

	// +kubebuilder:validation:Optional
	InstanceWarmupPeriod *float64 `json:"instanceWarmupPeriod,omitempty" tf:"instance_warmup_period,omitempty"`

	// +kubebuilder:validation:Optional
	MaximumScalingStepSize *float64 `json:"maximumScalingStepSize,omitempty" tf:"maximum_scaling_step_size,omitempty"`

	// +kubebuilder:validation:Optional
	MinimumScalingStepSize *float64 `json:"minimumScalingStepSize,omitempty" tf:"minimum_scaling_step_size,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	TargetCapacity *float64 `json:"targetCapacity,omitempty" tf:"target_capacity,omitempty"`
}

// CapacityProviderSpec defines the desired state of CapacityProvider
type CapacityProviderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CapacityProviderParameters `json:"forProvider"`
}

// CapacityProviderStatus defines the observed state of CapacityProvider.
type CapacityProviderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CapacityProviderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CapacityProvider is the Schema for the CapacityProviders API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type CapacityProvider struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CapacityProviderSpec   `json:"spec"`
	Status            CapacityProviderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CapacityProviderList contains a list of CapacityProviders
type CapacityProviderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CapacityProvider `json:"items"`
}

// Repository type metadata.
var (
	CapacityProvider_Kind             = "CapacityProvider"
	CapacityProvider_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CapacityProvider_Kind}.String()
	CapacityProvider_KindAPIVersion   = CapacityProvider_Kind + "." + CRDGroupVersion.String()
	CapacityProvider_GroupVersionKind = CRDGroupVersion.WithKind(CapacityProvider_Kind)
)

func init() {
	SchemeBuilder.Register(&CapacityProvider{}, &CapacityProviderList{})
}
