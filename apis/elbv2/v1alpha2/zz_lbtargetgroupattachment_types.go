/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LBTargetGroupAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type LBTargetGroupAttachmentParameters struct {

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +crossplane:generate:reference:type=LBTargetGroup
	// +kubebuilder:validation:Optional
	TargetGroupArn *string `json:"targetGroupArn,omitempty" tf:"target_group_arn,omitempty"`

	// Reference to a LBTargetGroup to populate targetGroupArn.
	// +kubebuilder:validation:Optional
	TargetGroupArnRef *v1.Reference `json:"targetGroupArnRef,omitempty" tf:"-"`

	// Selector for a LBTargetGroup to populate targetGroupArn.
	// +kubebuilder:validation:Optional
	TargetGroupArnSelector *v1.Selector `json:"targetGroupArnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	TargetID *string `json:"targetId" tf:"target_id,omitempty"`
}

// LBTargetGroupAttachmentSpec defines the desired state of LBTargetGroupAttachment
type LBTargetGroupAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LBTargetGroupAttachmentParameters `json:"forProvider"`
}

// LBTargetGroupAttachmentStatus defines the observed state of LBTargetGroupAttachment.
type LBTargetGroupAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LBTargetGroupAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LBTargetGroupAttachment is the Schema for the LBTargetGroupAttachments API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type LBTargetGroupAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LBTargetGroupAttachmentSpec   `json:"spec"`
	Status            LBTargetGroupAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LBTargetGroupAttachmentList contains a list of LBTargetGroupAttachments
type LBTargetGroupAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LBTargetGroupAttachment `json:"items"`
}

// Repository type metadata.
var (
	LBTargetGroupAttachment_Kind             = "LBTargetGroupAttachment"
	LBTargetGroupAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LBTargetGroupAttachment_Kind}.String()
	LBTargetGroupAttachment_KindAPIVersion   = LBTargetGroupAttachment_Kind + "." + CRDGroupVersion.String()
	LBTargetGroupAttachment_GroupVersionKind = CRDGroupVersion.WithKind(LBTargetGroupAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&LBTargetGroupAttachment{}, &LBTargetGroupAttachmentList{})
}
