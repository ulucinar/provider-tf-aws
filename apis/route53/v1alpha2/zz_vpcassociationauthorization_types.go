/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha2

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPCAssociationAuthorizationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VPCAssociationAuthorizationParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-aws/apis/ec2/v1alpha2.VPC
	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// Reference to a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDRef *v1.Reference `json:"vpcIdRef,omitempty" tf:"-"`

	// Selector for a VPC in ec2 to populate vpcId.
	// +kubebuilder:validation:Optional
	VPCIDSelector *v1.Selector `json:"vpcIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	VPCRegion *string `json:"vpcRegion,omitempty" tf:"vpc_region,omitempty"`

	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// VPCAssociationAuthorizationSpec defines the desired state of VPCAssociationAuthorization
type VPCAssociationAuthorizationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCAssociationAuthorizationParameters `json:"forProvider"`
}

// VPCAssociationAuthorizationStatus defines the observed state of VPCAssociationAuthorization.
type VPCAssociationAuthorizationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCAssociationAuthorizationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPCAssociationAuthorization is the Schema for the VPCAssociationAuthorizations API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type VPCAssociationAuthorization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPCAssociationAuthorizationSpec   `json:"spec"`
	Status            VPCAssociationAuthorizationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCAssociationAuthorizationList contains a list of VPCAssociationAuthorizations
type VPCAssociationAuthorizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCAssociationAuthorization `json:"items"`
}

// Repository type metadata.
var (
	VPCAssociationAuthorization_Kind             = "VPCAssociationAuthorization"
	VPCAssociationAuthorization_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPCAssociationAuthorization_Kind}.String()
	VPCAssociationAuthorization_KindAPIVersion   = VPCAssociationAuthorization_Kind + "." + CRDGroupVersion.String()
	VPCAssociationAuthorization_GroupVersionKind = CRDGroupVersion.WithKind(VPCAssociationAuthorization_Kind)
)

func init() {
	SchemeBuilder.Register(&VPCAssociationAuthorization{}, &VPCAssociationAuthorizationList{})
}
