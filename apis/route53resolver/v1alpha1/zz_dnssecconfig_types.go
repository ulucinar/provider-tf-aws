/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DNSSECConfigObservation struct {

	// The ARN for a configuration for DNSSEC validation.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// The ID for a configuration for DNSSEC validation.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The owner account ID of the virtual private cloud (VPC) for a configuration for DNSSEC validation.
	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	// The validation status for a DNSSEC configuration. The status can be one of the following: ENABLING, ENABLED, DISABLING and DISABLED.
	ValidationStatus *string `json:"validationStatus,omitempty" tf:"validation_status,omitempty"`
}

type DNSSECConfigParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// The ID of the virtual private cloud (VPC) that you're updating the DNSSEC validation status for.
	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`
}

// DNSSECConfigSpec defines the desired state of DNSSECConfig
type DNSSECConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DNSSECConfigParameters `json:"forProvider"`
}

// DNSSECConfigStatus defines the observed state of DNSSECConfig.
type DNSSECConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DNSSECConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DNSSECConfig is the Schema for the DNSSECConfigs API. Provides a Route 53 Resolver DNSSEC config resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type DNSSECConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DNSSECConfigSpec   `json:"spec"`
	Status            DNSSECConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DNSSECConfigList contains a list of DNSSECConfigs
type DNSSECConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DNSSECConfig `json:"items"`
}

// Repository type metadata.
var (
	DNSSECConfig_Kind             = "DNSSECConfig"
	DNSSECConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DNSSECConfig_Kind}.String()
	DNSSECConfig_KindAPIVersion   = DNSSECConfig_Kind + "." + CRDGroupVersion.String()
	DNSSECConfig_GroupVersionKind = CRDGroupVersion.WithKind(DNSSECConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&DNSSECConfig{}, &DNSSECConfigList{})
}
