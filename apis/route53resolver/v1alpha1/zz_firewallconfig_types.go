/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FirewallConfigObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`
}

type FirewallConfigParameters struct {

	// +kubebuilder:validation:Optional
	FirewallFailOpen *string `json:"firewallFailOpen,omitempty" tf:"firewall_fail_open,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`
}

// FirewallConfigSpec defines the desired state of FirewallConfig
type FirewallConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FirewallConfigParameters `json:"forProvider"`
}

// FirewallConfigStatus defines the observed state of FirewallConfig.
type FirewallConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FirewallConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallConfig is the Schema for the FirewallConfigs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type FirewallConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FirewallConfigSpec   `json:"spec"`
	Status            FirewallConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallConfigList contains a list of FirewallConfigs
type FirewallConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FirewallConfig `json:"items"`
}

// Repository type metadata.
var (
	FirewallConfig_Kind             = "FirewallConfig"
	FirewallConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FirewallConfig_Kind}.String()
	FirewallConfig_KindAPIVersion   = FirewallConfig_Kind + "." + CRDGroupVersion.String()
	FirewallConfig_GroupVersionKind = CRDGroupVersion.WithKind(FirewallConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&FirewallConfig{}, &FirewallConfigList{})
}
