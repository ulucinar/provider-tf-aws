/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QueryLogConfigObservation struct {

	// The ARN (Amazon Resource Name) of the Route 53 Resolver query logging configuration.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// The ID of the Route 53 Resolver query logging configuration.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The AWS account ID of the account that created the query logging configuration.
	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	// An indication of whether the query logging configuration is shared with other AWS accounts, or was shared with the current account by another AWS account.
	// Sharing is configured through AWS Resource Access Manager (AWS RAM).
	// Values are NOT_SHARED, SHARED_BY_ME or SHARED_WITH_ME
	ShareStatus *string `json:"shareStatus,omitempty" tf:"share_status,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type QueryLogConfigParameters struct {

	// The ARN of the resource that you want Route 53 Resolver to send query logs.
	// You can send query logs to an S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream.
	// +kubebuilder:validation:Required
	DestinationArn *string `json:"destinationArn" tf:"destination_arn,omitempty"`

	// The name of the Route 53 Resolver query logging configuration.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// A map of tags to assign to the resource. If configured with a provider default_tags configuration block present, tags with matching keys will overwrite those defined at the provider-level.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// QueryLogConfigSpec defines the desired state of QueryLogConfig
type QueryLogConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QueryLogConfigParameters `json:"forProvider"`
}

// QueryLogConfigStatus defines the observed state of QueryLogConfig.
type QueryLogConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QueryLogConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// QueryLogConfig is the Schema for the QueryLogConfigs API. Provides a Route 53 Resolver query logging configuration resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type QueryLogConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QueryLogConfigSpec   `json:"spec"`
	Status            QueryLogConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QueryLogConfigList contains a list of QueryLogConfigs
type QueryLogConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QueryLogConfig `json:"items"`
}

// Repository type metadata.
var (
	QueryLogConfig_Kind             = "QueryLogConfig"
	QueryLogConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: QueryLogConfig_Kind}.String()
	QueryLogConfig_KindAPIVersion   = QueryLogConfig_Kind + "." + CRDGroupVersion.String()
	QueryLogConfig_GroupVersionKind = CRDGroupVersion.WithKind(QueryLogConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&QueryLogConfig{}, &QueryLogConfigList{})
}
