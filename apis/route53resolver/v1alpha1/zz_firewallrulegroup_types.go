/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FirewallRuleGroupObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	ShareStatus *string `json:"shareStatus,omitempty" tf:"share_status,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type FirewallRuleGroupParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// FirewallRuleGroupSpec defines the desired state of FirewallRuleGroup
type FirewallRuleGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FirewallRuleGroupParameters `json:"forProvider"`
}

// FirewallRuleGroupStatus defines the observed state of FirewallRuleGroup.
type FirewallRuleGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FirewallRuleGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallRuleGroup is the Schema for the FirewallRuleGroups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type FirewallRuleGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FirewallRuleGroupSpec   `json:"spec"`
	Status            FirewallRuleGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FirewallRuleGroupList contains a list of FirewallRuleGroups
type FirewallRuleGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FirewallRuleGroup `json:"items"`
}

// Repository type metadata.
var (
	FirewallRuleGroup_Kind             = "FirewallRuleGroup"
	FirewallRuleGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FirewallRuleGroup_Kind}.String()
	FirewallRuleGroup_KindAPIVersion   = FirewallRuleGroup_Kind + "." + CRDGroupVersion.String()
	FirewallRuleGroup_GroupVersionKind = CRDGroupVersion.WithKind(FirewallRuleGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&FirewallRuleGroup{}, &FirewallRuleGroupList{})
}
