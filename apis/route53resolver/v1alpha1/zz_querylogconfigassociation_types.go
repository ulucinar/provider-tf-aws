/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QueryLogConfigAssociationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type QueryLogConfigAssociationParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ResolverQueryLogConfigID *string `json:"resolverQueryLogConfigId" tf:"resolver_query_log_config_id,omitempty"`

	// +kubebuilder:validation:Required
	ResourceID *string `json:"resourceId" tf:"resource_id,omitempty"`
}

// QueryLogConfigAssociationSpec defines the desired state of QueryLogConfigAssociation
type QueryLogConfigAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QueryLogConfigAssociationParameters `json:"forProvider"`
}

// QueryLogConfigAssociationStatus defines the observed state of QueryLogConfigAssociation.
type QueryLogConfigAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QueryLogConfigAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// QueryLogConfigAssociation is the Schema for the QueryLogConfigAssociations API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,awsjet}
type QueryLogConfigAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QueryLogConfigAssociationSpec   `json:"spec"`
	Status            QueryLogConfigAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QueryLogConfigAssociationList contains a list of QueryLogConfigAssociations
type QueryLogConfigAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QueryLogConfigAssociation `json:"items"`
}

// Repository type metadata.
var (
	QueryLogConfigAssociation_Kind             = "QueryLogConfigAssociation"
	QueryLogConfigAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: QueryLogConfigAssociation_Kind}.String()
	QueryLogConfigAssociation_KindAPIVersion   = QueryLogConfigAssociation_Kind + "." + CRDGroupVersion.String()
	QueryLogConfigAssociation_GroupVersionKind = CRDGroupVersion.WithKind(QueryLogConfigAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&QueryLogConfigAssociation{}, &QueryLogConfigAssociationList{})
}
